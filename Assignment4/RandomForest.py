import numpy as np
import DecisionTree

def fit(train_set, train_labels, n_trees=500, data_frac=.3, features_subcount=5):
    n = train_set.shape[0]

    # initialize model array of size n_trees
    model = np.empty(n_trees)

    # For each tree
    for i in range (0, n_trees):
        # Subsample
        subsample_index = np.random.choice(n, n*data_frac, replace=True)
        sub_set = train_set[subsample_index, :]
        sub_labels = sub_labels[subsample_index]
        
        # Build the tree
        tree = DecisionTree.fit(sub_set, sub_labels, features_subcount=features_subcount)
        
        # Store the tree
        model[i] = tree


    return model


def predict(test_set, model, unique_labels):
    """
    #### Predict the labels of a set based on a Random Forest model
    parameters:
        test_set: test samples
        model: a Random Forest model generated by the fit function
        unique_labels: unique labels of the data set
    return:
        pred: the predicted labels for the test samples
    """
    n = test_set.shape[0]
    
    # Predict the labels for each sample
    pred = np.empty(n)
    for i in range(n):
        ballot = {l:0 for l in unique_labels}

        # Predict the label of the samples for each tree
        for tree in model:
            ballot[DecisionTree.predict(test_set[i, :], tree)] += 1
        
        # Assign the most common label
        pred[i] = max(ballot, key=ballot.get)

    return pred